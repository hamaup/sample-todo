name: Claude Post-Merge Automation

on:
  pull_request:
    types: [closed]

jobs:
  after-merge:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得してCHANGELOG生成に使用
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          max_turns: 10
          timeout_minutes: 10
          allowed_tools: |
            Bash
            Read
            Write
            Edit
            MultiEdit
            TodoRead
            TodoWrite
            mcp__linear__list_issues
            mcp__linear__update_issue
            mcp__linear__get_issue
            mcp__linear__create_comment
          direct_prompt: |
            PRがmainブランチにマージされました。以下のタスクを実行してください：

            ## 1. CHANGELOG.md の更新
            - Conventional Commits形式のコミットメッセージを解析
            - 最新のマージコミットから変更内容を抽出
            - CHANGELOG.mdに新しいエントリを追加（日付、バージョン、変更内容）
            - セマンティックバージョニングに従ってバージョンを決定

            ## 2. Linear Issue の自動クローズ
            - PRタイトルまたは本文から Linear Issue ID を抽出（FORTUNE-XXX形式）
            - 該当するLinear Issueのステータスを"Done"に更新
            - Issueにマージ完了のコメントを追加

            ## 3. リリースノートの生成
            - 重要な変更点をまとめた簡潔なリリースノートを作成
            - docs/RELEASE_NOTES.md に追記

            ## 4. 依存関係の確認
            - package.jsonの変更があった場合、package-lock.jsonも更新されているか確認
            - 不整合があれば報告

            ## 注意事項
            - 破壊的変更がある場合は明確に記載
            - セキュリティ関連の更新は強調表示
            - ユーザー向けの変更とデベロッパー向けの変更を区別

            PRの詳細情報：
            - PR番号: #${{ github.event.pull_request.number }}
            - PRタイトル: ${{ github.event.pull_request.title }}
            - PRブランチ: ${{ github.event.pull_request.head.ref }}
            - マージ実行者: ${{ github.event.pull_request.merged_by.login }}

  create-release:
    needs: after-merge
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from CHANGELOG
        id: version
        run: |
          VERSION=$(grep -m1 '^## \[' CHANGELOG.md | sed 's/## \[\(.*\)\].*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body_path: docs/RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}